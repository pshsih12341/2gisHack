
services:
  
  traefik:
    image: "traefik:v3.1"
    container_name: "traefik"
    env_file:
      - .env
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik:/etc/traefik:ro
      - ./certs:/etc/letsencrypt
    restart: unless-stopped
  
  db:
    container_name: "db"
    image: "postgres:17"
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    ports:
      #Здесь возможно будет лучше поменять на "5433:${DB_PORT}", так как на сервере может быть 5432 уже быть занят другой POSTGRES
      - "${DB_PORT}:${DB_PORT}" 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pg_project:/var/lib/postgresql/data
    
  backend:
    container_name: "backend"
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/src/.env
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.rule=Host(`${HOST}`) && PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=le"
    
  frontend:
    container_name: "frontend"
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.rule=Host(`${HOST}`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=le"

volumes:
  pg_project:
